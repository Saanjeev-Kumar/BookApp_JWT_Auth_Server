// package main

// import (
// 	"encoding/csv"
// 	"fmt"
// 	"io"
// 	"log"
// 	"net/http"

// 	"github.com/dgrijalva/jwt-go"
// 	"github.com/gorilla/mux"

// 	"os"
// 	"strings"
// 	"time"
// )

// var jwtKey = []byte("your_secret_key")

// type User struct {
// 	Username string
// 	Password string
// 	UserType string
// }

// type Book struct {
// 	Name            string
// 	Author          string
// 	PublicationYear string
// }

// var Users = []User{
// 	{"admin", "admin123", "admin"},
// 	{"user", "user123", "user"},
// }

// var Books = []Book{
// 	{"Book1", "Author1", "2001"},
// 	{"Book2", "Author2", "2002"},
// }

// func main() {
// 	r := mux.NewRouter()

// 	r.HandleFunc("/login", LoginHandler).Methods("POST")
// 	r.HandleFunc("/home", HomeHandler).Methods("GET")
// 	r.HandleFunc("/addBook", AddBookHandler).Methods("POST")
// 	r.HandleFunc("/deleteBook", DeleteBookHandler).Methods("DELETE")

// 	log.Fatal(http.ListenAndServe(":8000", r))
// }

// func LoginHandler(w http.ResponseWriter, r *http.Request) {
// 	username, password := r.FormValue("username"), r.FormValue("password")
// 	fmt.Println("Inside Login handler")

// 	token := login(username, password)
// 	if token == "" {
// 		http.Error(w, "Invalid credentials", http.StatusUnauthorized)
// 		return
// 	}

// 	w.Write([]byte(token))
// 	fmt.Println("Exit login Handler")
// }

// func HomeHandler(w http.ResponseWriter, r *http.Request) {
// 	username := r.Header.Get("username")

// 	userType := getUserType(username)
// 	books := home(userType)

// 	w.Write([]byte(fmt.Sprintf("Books: %v", books)))
// }

// func AddBookHandler(w http.ResponseWriter, r *http.Request) {
// 	username := r.Header.Get("username")

// 	//newBook := Book{r.FormValue("name"), r.FormValue("author"), r.FormValue("publicationYear")}
// 	newBook := Book{}
// 	addBook(newBook, username)

// 	w.Write([]byte("Book added successfully"))
// }

// func DeleteBookHandler(w http.ResponseWriter, r *http.Request) {
// 	username := r.Header.Get("username")

// 	deleteBook(r.FormValue("name"), username)

// 	w.Write([]byte("Book deleted successfully"))
// }

// func login(username, password string) string {
// 	fmt.Println(" login -1")
// 	for _, user := range Users {
// 		if user.Username == username && user.Password == password {
// 			expirationTime := time.Now().Add(24 * time.Hour)
// 			claims := &jwt.StandardClaims{
// 				ExpiresAt: expirationTime.Unix(),
// 				Issuer:    username,
// 			}

// 			token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
// 			tokenString, err := token.SignedString(jwtKey)
// 			if err != nil {
// 				return ""
// 			}
// 			return tokenString
// 		}
// 	}
// 	fmt.Println("Exit login Handler")
// 	return ""
// }

// func getUserType(username string) string {
// 	for _, user := range Users {
// 		if user.Username == username {
// 			return user.UserType
// 		}
// 	}
// 	return ""
// }

// //	func home(userType string) []Book {
// //		if userType == "admin" {
// //			return Books
// //		}
// //		return Books[:len(Books)-1]
// //	}
// func home(userType string) []Book {
// 	var books []Book

// 	if userType == "admin" {
// 		books = append(books, readBooksFromFile("adminUser.csv")...)
// 	}
// 	books = append(books, readBooksFromFile("regularUser.csv")...)

// 	return books
// }

// func readBooksFromFile(filename string) []Book {
// 	file, err := os.Open(filename)
// 	if err != nil {
// 		log.Fatal(err)
// 	}
// 	defer file.Close()

// 	reader := csv.NewReader(file)
// 	var books []Book
// 	for {
// 		record, err := reader.Read()
// 		if err == io.EOF {
// 			break
// 		}
// 		if err != nil {
// 			log.Fatal(err)
// 		}

// 		book := Book{
// 			Name:            record[0],
// 			Author:          record[1],
// 			PublicationYear: record[2],
// 		}
// 		books = append(books, book)
// 	}

// 	return books
// }

// func addBook(book Book, username string) {
// 	if getUserType(username) == "admin" {
// 		Books = append(Books, book)
// 	}
// }

// func deleteBook(bookName, username string) {
// 	if getUserType(username) == "admin" {
// 		for i, book := range Books {
// 			if strings.ToLower(book.Name) == strings.ToLower(bookName) {
// 				Books = append(Books[:i], Books[i+1:]...)
// 				break
// 			}
// 		}
// 	}
// }
